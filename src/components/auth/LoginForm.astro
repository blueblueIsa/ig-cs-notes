---
interface Props {
  mode?: 'login' | 'register';
}

const { mode = 'login' } = Astro.props;
---

<form id="auth-form" class="space-y-6" data-mode={mode}>
  <div class="brand-section text-center mb-8">
    <h1 class="text-3xl font-bold text-primary">IG CS World</h1>
    <p class="text-gray-600 mt-2">Explore the World of Computer Science</p>
  </div>

  <div class="form-group">
    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
    <div class="relative mt-1">
      <input
        type="email"
        id="email"
        name="email"
        required
        class="form-input block w-full px-4 py-3 rounded-md border-gray-300 shadow-sm focus:ring-primary focus:border-primary"
        placeholder="Enter your email"
      />
      <div class="validation-message hidden text-xs text-red-500 mt-1">
        Please enter a valid email address
      </div>
    </div>
  </div>

  <div class="form-group">
    <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
    <div class="relative mt-1">
      <input
        type="password"
        id="password"
        name="password"
        required
        pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$"
        class="form-input block w-full px-4 py-3 rounded-md border-gray-300 shadow-sm focus:ring-primary focus:border-primary pr-10"
        placeholder="Enter your password"
      />
      <button
        type="button"
        class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      </button>
      <div class="validation-message hidden text-xs text-red-500 mt-1">
        Password must contain uppercase, lowercase, numbers, and be at least 8 characters
      </div>
    </div>
  </div>

  {mode === 'login' && (
    <div class="flex items-center justify-between">
      <label class="flex items-center">
        <input type="checkbox" class="form-checkbox h-4 w-4 text-primary" name="remember" />
        <span class="ml-2 text-sm text-gray-600">Remember me</span>
      </label>
      <a href="#" class="text-sm text-primary hover:text-primary-dark">Forgot password?</a>
    </div>
  )}

  <div>
    <button
      type="submit"
      class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200"
    >
      <span class="button-text">{mode === 'login' ? 'Sign In' : 'Sign Up'}</span>
      <span class="loading-spinner hidden ml-2">
        <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </span>
    </button>
  </div>

  <div class="error-message hidden text-sm text-center text-red-500 mt-4"></div>
</form>

<script>
  import { handleAuth } from '../../types/auth';

  // Form validation
  function validateInput(input: HTMLInputElement) {
    const validationMessage = input.nextElementSibling as HTMLElement;
    const isValid = input.checkValidity();
    
    validationMessage?.classList.toggle('hidden', isValid);
    input.classList.toggle('border-red-500', !isValid);
    
    return isValid;
  }

  // Password toggle
  function setupPasswordToggle() {
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const toggleButton = document.querySelector('.toggle-password');

    toggleButton?.addEventListener('click', () => {
      const type = passwordInput.type === 'password' ? 'text' : 'password';
      passwordInput.type = type;
    });
  }

  // Form submission
  function setupForm() {
    const form = document.getElementById('auth-form') as HTMLFormElement;
    const errorMessage = form.querySelector('.error-message') as HTMLElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const loadingSpinner = submitButton.querySelector('.loading-spinner') as HTMLElement;
    const buttonText = submitButton.querySelector('.button-text') as HTMLElement;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Validate all inputs
      const inputs = form.querySelectorAll('input[required]') as NodeListOf<HTMLInputElement>;
      let isValid = true;
      inputs.forEach((input) => {
        if (!validateInput(input)) {
          isValid = false;
        }
      });

      if (!isValid) return;

      // Show loading state
      submitButton.disabled = true;
      loadingSpinner.classList.remove('hidden');
      buttonText.classList.add('opacity-0');
      errorMessage.classList.add('hidden');

      try {
        const formData = new FormData(form);
        await handleAuth(
          formData.get('email') as string,
          formData.get('password') as string,
          form.dataset.mode as 'login' | 'register'
        );
        window.location.href = '/';
      } catch (error) {
        if (error instanceof Error) {
          errorMessage.textContent = error.message;
        } else {
          errorMessage.textContent = 'An unknown error occurred';
        }
        errorMessage.classList.remove('hidden');
      } finally {
        submitButton.disabled = false;
        loadingSpinner.classList.add('hidden');
        buttonText.classList.remove('opacity-0');
      }
    });

    // Real-time input validation
    (form.querySelectorAll('input[required]') as NodeListOf<HTMLInputElement>).forEach((input) => {
      input.addEventListener('input', () => validateInput(input));
      input.addEventListener('blur', () => validateInput(input));
    });
  }

  // Initialize
  setupPasswordToggle();
  setupForm();
</script>

<style>
  .form-input:focus {
    box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
  }

  .loading-spinner {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }

  .button-text {
    transition: opacity 0.2s;
  }
</style>